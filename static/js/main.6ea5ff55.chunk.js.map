{"version":3,"sources":["contexts/EthContext/EthContext.js","contexts/EthContext/state.js","contexts/EthContext/EthProvider.jsx","contexts/EthContext/useEth.js","components/Intro/Welcome.jsx","components/Intro/Tree.jsx","components/Intro/Desc.jsx","components/Intro/index.jsx","components/Setup.jsx","components/Demo/Title.jsx","components/Demo/Cta.jsx","components/Demo/Contract.jsx","components/Demo/ContractBtns.jsx","components/Demo/Desc.jsx","components/Demo/NoticeNoArtifact.jsx","components/Demo/NoticeWrongNetwork.jsx","components/Demo/index.jsx","components/Footer.jsx","App.jsx","index.js"],"names":["EthContext","createContext","actions","initialState","artifact","web3","accounts","networkID","contract","reducer","state","action","type","data","Error","EthProvider","children","useReducer","dispatch","init","useCallback","Web3","givenProvider","eth","requestAccounts","net","getId","abi","address","networks","Contract","err","console","error","useEffect","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener","Provider","value","useEth","useContext","Welcome","className","Tree","Desc","href","target","rel","Intro","Setup","Title","Cta","spanEle","useRef","current","classList","add","flash","setTimeout","remove","clearTimeout","ref","ContractBtns","setValue","useState","inputValue","setInputValue","read","methods","call","from","write","tagName","alert","newValue","parseInt","send","onClick","placeholder","onChange","test","NoticeNoArtifact","NoticeWrongNetwork","Demo","demo","Link","uri","text","Footer","App","id","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6ea5ff55.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst EthContext = createContext();\n\nexport default EthContext;\n","const actions = {\n  init: \"INIT\",\n};\n\nconst initialState = {\n  artifact: null,\n  web3: null,\n  accounts: null,\n  networkID: null,\n  contract: null\n};\n\nconst reducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case actions.init:\n      return { ...state, ...data };\n    default:\n      throw new Error(\"Undefined reducer action type\");\n  }\n};\n\nexport {\n  actions,\n  initialState,\n  reducer\n};\n","import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n        } catch (err) {\n          console.error(err);\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract }\n        });\n      }\n    }, []);\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/SimpleStorage.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n","import { useContext } from \"react\";\nimport EthContext from \"./EthContext\";\n\nconst useEth = () => useContext(EthContext);\n\nexport default useEth;\n","function Welcome() {\n  return (\n    <div className=\"welcome\">\n      <h1>👋 Welcome to the Truffle + React Box!</h1>\n      <p>\n        This is everything you need to start using Truffle to write,\n        compile, test, and deploy smart contracts, and interact with\n        them from a React app.\n      </p>\n    </div>\n  );\n}\n\nexport default Welcome;\n","function Tree() {\n  return (\n    <code>\n      {`.\\n`}\n      {`├── client`}\n      <span className=\"primary-color\">\n        {`   # React project (create-react-app)\\n`}\n      </span>\n      {`└── truffle`}\n      <span className=\"primary-color\">\n        {`  # Truffle project`}\n      </span>\n    </code>\n  );\n}\n\nexport default Tree;\n","function Desc() {\n  return (\n    <p>\n      This particular Box uses&nbsp;\n      <a href=\"https://github.com/ChainSafe/web3.js\" target=\"_blank\" rel=\"noreferrer\">\n        web3.js\n      </a>\n      , a popular Ethereum library.\n    </p>\n  );\n}\n\nexport default Desc;\n","import Welcome from \"./Welcome\";\nimport Tree from \"./Tree\";\nimport Desc from \"./Desc\";\n\nfunction Intro() {\n  return (\n    <>\n      <Welcome />\n      <Tree />\n      <Desc />\n    </>\n  );\n}\n\nexport default Intro;\n","function Setup() {\n\n  return (\n    <>\n      <h2>Preparation</h2>\n\n      <details>\n        <summary>Install</summary>\n        <p>Install Truffle and Ganache globally.</p>\n        <code>$ npm install -g truffle ganache</code>\n      </details>\n\n      <details>\n        <summary>Ganache and MetaMask</summary>\n        <p>\n          Open a terminal and run Ganache, a simulated Ethereum blockchain on your machine.\n        </p>\n        <code>$ ganache</code>\n        <p>From the list of generated private keys, import the first one to MetaMask.</p>\n      </details>\n\n      <details>\n        <summary>Truffle</summary>\n        <p>\n          Keep Ganache running and open another terminal. Let's compile and deploy our\n          contracts to Ganache.\n        </p>\n        <code>\n          {`$ cd truffle\\n`}\n          {`$ truffle migrate --network development\\n`}\n          <span className=\"dim-color\">\n            # The `development` network points to Ganache, it's configured in\n            truffle/truffle-config.js on line 45.\n          </span>\n        </code>\n      </details>\n    </>\n  );\n}\n\nexport default Setup;\n","function Title() {\n  return <h2>See it in action</h2>;\n}\n\nexport default Title;\n","function Cta() {\n  return (\n    <p>\n      Try changing&nbsp;\n      <span className=\"code\">value</span>\n      &nbsp;in&nbsp;\n      <span className=\"code\">SimpleStorage</span>.\n    </p>\n  );\n}\n\nexport default Cta;\n","import { useRef, useEffect } from \"react\";\n\nfunction Contract({ value }) {\n  const spanEle = useRef(null);\n\n  useEffect(() => {\n    spanEle.current.classList.add(\"flash\");\n    const flash = setTimeout(() => {\n      spanEle.current.classList.remove(\"flash\");\n    }, 300);\n    return () => {\n      clearTimeout(flash);\n    };\n  }, [value]);\n\n  return (\n    <code>\n      {`contract SimpleStorage {\n  uint256 value = `}\n\n      <span className=\"secondary-color\" ref={spanEle}>\n        <strong>{value}</strong>\n      </span>\n\n      {`;\n\n  function read() public view returns (uint256) {\n    return value;\n  }\n\n  function write(uint256 newValue) public {\n    value = newValue;\n  }\n}`}\n    </code>\n  );\n}\n\nexport default Contract;\n","import { useState } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\n\nfunction ContractBtns({ setValue }) {\n  const { state: { contract, accounts } } = useEth();\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = e => {\n    if (/^\\d+$|^$/.test(e.target.value)) {\n      setInputValue(e.target.value);\n    }\n  };\n\n  const read = async () => {\n    const value = await contract.methods.read().call({ from: accounts[0] });\n    setValue(value);\n  };\n\n  const write = async e => {\n    if (e.target.tagName === \"INPUT\") {\n      return;\n    }\n    if (inputValue === \"\") {\n      alert(\"Please enter a value to write.\");\n      return;\n    }\n    const newValue = parseInt(inputValue);\n    await contract.methods.write(newValue).send({ from: accounts[0] });\n  };\n\n  return (\n    <div className=\"btns\">\n\n      <button onClick={read}>\n        read()\n      </button>\n\n      <div onClick={write} className=\"input-btn\">\n        write(<input\n          type=\"text\"\n          placeholder=\"uint\"\n          value={inputValue}\n          onChange={handleInputChange}\n        />)\n      </div>\n\n    </div>\n  );\n}\n\nexport default ContractBtns;\n","function Desc() {\n  return (\n    <>\n      <p>\n        Take a look at <span className=\"code\">client/src/contexts/EthContext</span>.\n        This context maintains a global state and provides web3.js functionalities\n        to the rest of the app.\n      </p>\n      <p>\n        Feel free to remove any component or styling that you don't need, and\n        extend <span className=\"code\">EthContext</span> to your dapp's needs.\n      </p>\n      <p>\n        Happy hacking!\n      </p>\n    </>\n  );\n}\n\nexport default Desc;\n","function NoticeNoArtifact() {\n  return (\n    <p>\n      ⚠️ Cannot find <span className=\"code\">SimpleStorage</span> contract artifact.\n      Please complete the above preparation first, then restart the react dev server.\n    </p>\n  );\n}\n\nexport default NoticeNoArtifact;\n","function NoticeWrongNetwork() {\n  return (\n    <p>\n      ⚠️ MetaMask is not connected to the same network as the one you deployed to.\n    </p>\n  );\n}\n\nexport default NoticeWrongNetwork;\n","import { useState } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Title from \"./Title\";\nimport Cta from \"./Cta\";\nimport Contract from \"./Contract\";\nimport ContractBtns from \"./ContractBtns\";\nimport Desc from \"./Desc\";\nimport NoticeNoArtifact from \"./NoticeNoArtifact\";\nimport NoticeWrongNetwork from \"./NoticeWrongNetwork\";\n\nfunction Demo() {\n  const { state } = useEth();\n  const [value, setValue] = useState(\"?\");\n\n  const demo =\n    <>\n      <Cta />\n      <div className=\"contract-container\">\n        <Contract value={value} />\n        <ContractBtns setValue={setValue} />\n      </div>\n      <Desc />\n    </>;\n\n  return (\n    <div className=\"demo\">\n      <Title />\n      {\n        !state.artifact ? <NoticeNoArtifact /> :\n          !state.contract ? <NoticeWrongNetwork /> :\n            demo\n      }\n    </div>\n  );\n}\n\nexport default Demo;\n","function Link({ uri, text }) {\n  return <a href={uri} target=\"_blank\" rel=\"noreferrer\">{text}</a>;\n}\n\nfunction Footer() {\n  return (\n    <footer>\n      <h2>More resources</h2>\n      <Link uri={\"https://trufflesuite.com\"} text={\"Truffle\"} />\n      <Link uri={\"https://reactjs.org\"} text={\"React\"} />\n      <Link uri={\"https://soliditylang.org\"} text={\"Solidity\"} />\n      <Link uri={\"https://ethereum.org\"} text={\"Ethereum\"} />\n    </footer >\n  );\n}\n\nexport default Footer;\n","import { EthProvider } from \"./contexts/EthContext\";\nimport Intro from \"./components/Intro/\";\nimport Setup from \"./components/Setup\";\nimport Demo from \"./components/Demo\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <EthProvider>\n      <div id=\"App\" >\n        <div className=\"container\">\n          <Intro />\n          <hr />\n          <Setup />\n          <hr />\n          <Demo />\n          <hr />\n          <Footer />\n        </div>\n      </div>\n    </EthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}